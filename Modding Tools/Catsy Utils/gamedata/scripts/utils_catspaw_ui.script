local func_index = actor_status.func_index




-- ======================================================================
-- 	CONTEXT MENU
-- ======================================================================
local scm_min_ind = 0
local scm_max_ind 	= 999999
local scm_min_group	= 0
local scm_max_group	= 999
local scm_min_item = 0
local scm_max_item = 999
local sorted_menu_mgr

local function start_menu_manager() sorted_menu_mgr = SortedContextMenu() end
function get_sorted_menu_manager() return sorted_menu_mgr end

class "SortedContextMenu"

function SortedContextMenu:__init()
	self.menu = {}
	self.items = {}
	self.groups = {
		["fast_travel"] = {	-- Fast travel options at the top of the menu
			order = scm_min_group,
			items = {},
		}
		["paw"] = { 	-- Personal Adjustable Waypoint
			order = scm_min_group + 1,
			items = {},
		}
		["main"] = { 	-- Any unsorted items that don't have a group
			order = scm_max_item,
			items = {},
		}
	}
	RegisterScriptCallback("map_spot_menu_add_property", self)
end

function SortedContextMenu:map_spot_menu_add_property(property_ui, id, level_name)
	vl("SortedContextMenu:map_spot_menu_add_property for %s on %s", id, level_name)
	if (not self.menu) or is_empty(self.menu) then return end
	--for i = scm_min_ind, scm_max_ind do
	for _,opt in ipairs(self.menu) do
		vl("Checking menu entry %s", opt.key)
		--local opt 	= self.menu[i]
		local text 	= opt and opt(property_ui, id, level_name)
		if text then property_ui:AddItem(text)

	end
end


function SortedContextMenu:SortMenu()
	local function grp_ind(o) return (o or 0) * (scm_max_group + 1) end
	self.menu 	= {}
	for _,gcfg in pairs(self.groups) do
		local g_ind = grp_ind(gcfg.order)
		if gcfg.items and not is_empty(gcfg.items) then
			for i,icfg in pairs(gcfg.items) do
				self.menu[g_ind + i] = icfg.functor
				printf("Item %s used in group, added at index %s", g_ind + i)
			end
		end
	end
end

function SortedContextMenu:RegisterGroup(name, order)
	if not (name and order) then return end
	if self.groups[name] or self.items[name] then return end
	local ind = clamp(order or 1, scm_min_group + 1, scm_max_group - 1)
	if self.menu[order] then
		ind = get_next_avail_index(self.menu, ind, scm_max_group)
		if not ind then
			ind = get_next_avail_index(self.menu, ind, scm_min_group, -1)
			if not ind then
				dl("Could not get available slot for new context menu group %s", name)
				return
			end
		end
	end
	dl("Registering new context menu group \"%s\" with order %s", name, ind)
	self.groups[name] = {
		index = ind,
		items = {},
	}
	self:SortMenu()
end

function SortedContextMenu:RegisterItem(name, args, no_sort)
	if not name then return end
	args = args or {}
	local func = args.func
	local group = args.group or "main"
	if not self.groups[group] then
		group = "main"
	end
	local order = args.order or scm_min_item
	local ind = clamp(order or 1, scm_min_item + 1, scm_max_item - 1)
	
	
	local items = self.groups[group].items
	if items[name] then
		ind = get_next_avail_index(self.menu, ind, scm_max_item)
		if not ind then
			ind = get_next_avail_index(self.menu, ind, scm_min_item, -1)
			if not ind then
				dl("Could not get available slot for new context menu item %s", name)
				return
			end
		end
	end

	args.order 			= ind
	args.key 			= name
	items[ind] 			= args
	self.items[name] 	= args
	if no_sort then return end
	self:SortMenu()
end


-- ======================================================================

function on_game_start()
	start_menu_manager()
end
		["main"] = { 	-- Any unsorted items that don't have a group
			index = scm_max_index,
			items = {},
		}
	}
end

function SortedContextMenu:SortMenu()
end

function SortedContextMenu:RegisterGroup(name, index)
	if not (name and index) then return end
	if self.groups[name] then return end
	local ind = clamp(index or 1, scm_min_group + 1, scm_max_group - 1)
	if self.menu[pri] then
		ind = get_next_avail_index(self.menu, ind, scm_max_group)
		if not ind then
			ind = get_next_avail_index(self.menu, ind, scm_min_group, -1)
			if not ind then
				dl("Could not get available index slot for new context menu group %s", name)
				return
			end
		end
	end
	dl("Registering new context menu group \"%s\" with index %s", name, ind)
	self.groups[name] = {
		index = ind,
		items = {},
	}
	self:SortMenu()
end

function SortedContextMenu:RegisterItem(name, index, args)
	if not name then return end
	local func = args and args.func
	local group = args and args.group or "main"
	if not self.groups[group] then
		group = "main"
	end
	index = index or scm_min_item
end
-- ======================================================================
